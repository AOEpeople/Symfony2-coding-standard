<?xml version="1.0"?>
<ruleset name="Symfony2">
    <description>The Symfony2 coding standard.</description>

    <!-- There should not be any code in the bundle Resources directory. -->
    <exclude-pattern>*/Resources/*</exclude-pattern>

    <!--

    See the [documented coding standard](http://symfony.com/doc/current/contributing/code/standards.html)

    This CodeSniffer standard does not yet enforce the following:

    # Structure

    * Declare class properties before methods;
    * Declare public methods first, then protected ones and finally private ones.
    * Use namespaces for all classes;
    * Add PHPDoc blocks for all classes, methods, and functions;
    * The @package and @subpackage annotations are not used.
    * Use uppercase strings for constants with words separated with underscores

    # Naming Conventions

    * Use underscores for option, argument, parameter names;

    -->

    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>

    <!-- We provide our own subclass of PEAR's ClassComment and FunctionComment sniff, but these will do: -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Import Zend coding standard (which in turn imports PEAR) -->
    <rule ref="Zend">
        <!-- but exclude their code analyzer -->
        <exclude name="Zend.Debug.CodeAnalyzer"/>

        <!-- covered by Squiz ControlSignature, which enforces try/catch as well -->
        <exclude name="PEAR.ControlStructures.ControlSignature"/>

        <exclude name="PEAR.Commenting.FunctionComment.SpacingBeforeTags"/>

        <!-- do not check line length -->
        <exclude name="Generic.Files.LineLength"/>
    </rule>

    <!-- Don't enforce Zend's private member underscores -->
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Ignore variables that contains numbers -->
    <rule ref="Zend.NamingConventions.ValidVariableName.ContainsNumbers">
        <severity>0</severity>
    </rule>

    <!-- In practice, Symfony2 spaces multiline function calls differently than Zend -->
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony2.Commenting.FunctionComment.MissingParamComment">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony2.Commenting.FunctionComment.SpacingBeforeTags">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony2.Commenting.ClassComment.SpacingBeforeTags">
        <message>There should always be a description, followed by a blank line, before the tags of a class comment.</message>
    </rule>

    <!-- Later Additions -->

    <!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
    <rule ref="Zend.Files.ClosingTag">
        <exclude-pattern>*\.(?!phtml$)</exclude-pattern>
    </rule>
    <!-- exclude sub vendor folder -->
    <exclude-pattern>*/vendor/*</exclude-pattern>
    <!-- Reports errors if the same class or interface name is used in multiple files. -->
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <!-- Related to this - only one Class or Interface Declaration per File -->
    <rule ref="Generic.Files.OneClassPerFile"/>
    <rule ref="Generic.Files.OneInterfacePerFile"/>
    <!-- PHP code MUST use only UTF-8 without BOM. -->
    <rule ref="Generic.Files.ByteOrderMark"/>
    <!-- PHP files should contain an empty line at the end of the file -->
    <rule ref="Generic.Files.EndFileNewline"/>
    <!-- Allow only unix file endings (newlines) -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>
    <!-- Show Warnings for Comments of Unready Code, but dont set as error -->
    <rule ref="Generic.Commenting.Fixme">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Commenting.Todo">
        <severity>0</severity>
    </rule>
    <!-- Detects empty statement. -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <!-- Detects for-loops that use a function call in the test expression. -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <!-- Detects incrementer jumbling ($i,$j,$k...) in for loops. -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <!-- Detects If Statements with single true/false values and no condition -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <!-- Detects unnecessary final modifiers inside of final classes. -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
    <!-- Detects unnecessary overriden methods that simply call their parent. -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <!-- Disallow multiple Statements per Line -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <!-- PHP functions MUST NOT be too complex and should be refactored if so -->
    <rule ref="Generic.Metrics.CyclomaticComplexity"/>
    <rule ref="Generic.Metrics.NestingLevel"/>
    <!-- PHP constructor MUST be named __construct -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <!-- PHP code MUST NOT contain any character before the opening tag. Exclude Phtml Files. -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag">
        <exclude-pattern>*\.(?!phtml$)</exclude-pattern>
    </rule>
    <!-- PHP code MUST NOT contain any short opening tag like <? instead of proper <?php -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <!-- PHP code MUST NOT contain alias functions that are kept in PHP for compatibility with older versions-->
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <!-- PHP code MUST NOT contain silenced errors (@) -->
    <rule ref="Generic.PHP.NoSilencedErrors"/>
    <!-- Check for Usage of deprecated Function in current PHP Version -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <!-- Code MUST use an indent of 4 spaces -->
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>
    <!-- Code MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <!-- Braces after function MUST be in newline -->
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
    <!-- PHP code MUST contain properly declared classes and functions -->
    <rule ref="PEAR.Classes.ClassDeclaration"/>
    <!-- PHP classes/interfaces MUST use start with a capital letter and must use the _ as separator -->
    <rule ref="PEAR.NamingConventions.ValidClassName"/>
    <!-- Checks Function Parameters Declaration for Default Values -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <!-- Checks Indentation of Object Method Chaining -->
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent"/>
    <!-- Checks correct Position of Closing Braces in Classes, Functions, Control Signatures... Exclude Phtml Files. -->
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace">
        <exclude-pattern>*\.(?!phtml$)</exclude-pattern>
    </rule>
    <!-- PHP code MUST NOT contain functions outside of classes -->
    <rule ref="Squiz.Functions.GlobalFunction"/>
    <!-- Tests that the asterisks in a doc comment align correctly -->
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <!-- Verifies that a @throws tag exists for a function that throws exceptions -->
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag"/>
    <!-- Checks Usage of Increment/Decrement Operators, i.e. $a -= 1; -->
    <rule ref="Squiz.Operators.IncrementDecrementUsage"/>
    <!-- Checks syntactical Usage of Logical Operators in Conditions -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <!-- Correct Scope Declaration of Methods inside Classes -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <!-- Correct Usage of this in Static Members -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <!-- Correct Usage of echo and Formatting of strings to be echoed -->
    <rule ref="Squiz.Strings.EchoedStrings"/>
    <!-- Checks Spacing around Logical Operators in Conditions -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>0</severity>
    </rule>
    <!-- Show Warnings on Discouraged Functions like error_log, print_r and var_dump -->
    <rule ref="Squiz.PHP.DiscouragedFunctions">
        <severity>0</severity>
    </rule>
    <!-- Eval is Evil -->
    <rule ref="Squiz.PHP.Eval"/>
    <!-- Dont use $GLOBALS -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <!-- Checks for Code that will never be Executed by bad Design -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <!-- File Comments are not widely used, but we want a Class Comment Block -->
    <exclude name="PEAR.Commenting.FileComment"/>
    <rule ref="PEAR.Commenting.ClassComment"/>
</ruleset>
